<?xml version="1.0" encoding="utf-8"?>
<topic id="C73DDB0A-3EC4-4fa4-A341-6A054FDA07DC" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        <newTerm>dotNetInstaller</newTerm> is a general-purpose setup bootstrapper for Microsoft Windows.
        <mediaLink>
          <image xlink:href="Logo.gif" />
        </mediaLink>
      </para>
      <para>
        dotNetInstaller enables developers to define the application prerequisites and install the correct version(s) of
        these components in a predictable order based on the processor architecture, user operating system type or language.
        It allows the user to download components from the web, install these components directly from a single packaged setup,
        local media or both. dotNetInstaller is very feature rich and runs on all modern Windows operating systems since Windows XP
        with a very tiny footprint.
      </para>
      <para>
        A boostrapper doesn't replace tools like InstallShield, Wise, Visual Studio Setup and Deployment Projects or Wix.
        The goal of this application is to help users with installing the correct prerequisites. Most real world applications
        need to install several components to work properly, including Windows Service Packs, Internet Explorer, MDAC or
        .NET Framework. Such an application is known as a <newTerm>bootstrapper</newTerm>.
      </para>
      <para>
        A bootstrapper also enables additional scenarios not supported by one single installer.
        <list class="bullet">
          <listItem>
            Distribute a single, compressed, executable packaged setup with all pre-requisites.
          </listItem>
          <listItem>
            Distribute multiple installers that compose a large and complex application in a single package
            and enforce a well-defined installation workflow and dependencies.
          </listItem>
          <listItem>
            Package frequently required components or components with a small footprint,
            and download less frequently used or larger ones only when necessary.
          </listItem>
          <listItem>
            Provide additional parameters to existing package technologies, eg. automatically enabling logging
            in MSI installers.
          </listItem>
          <listItem>
            Support workflow that includes a reboot in the middle of an installation between
            interdependent components.
          </listItem>
          <listItem>
            Support web-based scenarios that include on-demand downloading the latest versions of the installed software
            and prerequisites.
          </listItem>
          <listItem>
            Uninstall applications composed of several packages in a single sequence.
          </listItem>
        </list>
      </para>
      <para>
        This project consists of the following elements:
        <list class="bullet">
          <listItem>
            <application>dotNetInstaller</application>: main bootstrapper application, written in C++.
            This is the raw setup which presents a GUI in front of the user that displays which components to install depending
            on which components are already installed on the operating system. The bootstrapper is statically linked with the
            CRT and has no prerequisites.
          </listItem>
          <listItem>
            <application>InstallerEditor</application>: an application for editing configuration files and dotNetInstaller.exe
            resources, written in C# for the .NET Framework 4.0. The editor is also capable of importing older
            versions of dotNetInstaller configuration files and converting them into the current/newer format.
          </listItem>
          <listItem>
            <application>InstallerLinker</application>: a command-line bootstrapper linker that can be used in a build process,
            written in C# for the .NET Framework 4.0.
          </listItem>
          <listItem>
            Several samples and dependency templates that can be reused as-is and that demonstrate sometimes complex checks which
            verify whether, for example, MDAC or .NET framework are already installed.
          </listItem>
        </list>
      </para>
      <para>
        This project began as a
        <externalLink>
          <linkUri>http://www.codeproject.com/KB/install/dotNetInstaller.aspx</linkUri>
          <linkText>CodeProject article</linkText>
        </externalLink> and was maintained on the
        <externalLink>
          <linkUri>http://www.devage.com/</linkUri>
          <linkText>DevAge</linkText>
        </externalLink>
        website and
        <externalLink>
          <linkUri>https://sourceforge.net/projects/dotnetinstaller</linkUri>
          <linkText>SourceForge</linkText>
        </externalLink> by David Icardi.
        It continued its journey through CodePlex and is now officially maintained on Github at
        <externalLink>
          <linkUri>https://github.com/dotnetinstaller/dotnetinstaller</linkUri>
          <linkText>https://github.com/dotnetinstaller/dotnetinstaller</linkText>
        </externalLink> by a community of developers that use dotNetInstaller in their own projects.
      </para>
    </introduction>
    <relatedTopics>
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="a6f46303-b703-4ff3-9572-55d8131eb883" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>