<?xml version="1.0" encoding="utf-8"?>
<topic id="13ba8ef4-383f-4dd4-9588-b4ace3fcbf12" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        You can use the <newTerm>InstalledCheck</newTerm> configuration element to check whether a
        component is already installed or to conditionally enable or display user-defined controls.
      </para>
      <para>
        For example, you can check if .NET Framework 1.1 is installed by reading this registry key 
        <fictitiousUri>SOFTWARE\Microsoft\NET Framework Setup\NDP\v1.1.4322\Install</fictitiousUri>.
        InstalledChecks can be combined with <newTerm>operating system filters</newTerm> which selects components 
        depending on the target OS and with <newTerm>processor architecture filters</newTerm> which check the operating 
        system or hardware architecture.
      </para>
    </introduction>
    <section address="checkstypes">
      <title>Installed Check Types</title>
      <content>
        <para>
          There are four types of installed checks: <newTerm>check_file</newTerm>, <newTerm>check_directory</newTerm>,
          <newTerm>check_registry_value</newTerm> and <newTerm>check_product</newTerm>. These can also be added under
          installed check operators.
        </para>
      </content>
      <sections>
        <section address="checktypesfile">
          <title>check_file</title>
          <content>
            <para>
              Check for a specific file with a specific version.
            </para>
            <para>
              The following comparison types are available.
              <definitionTable>
                <definedTerm>match</definedTerm>
                <definition>Check that the version of the file exactly matches the check value.</definition>
                <definedTerm>exists</definedTerm>
                <definition>Check whether the file exists.</definition>
                <definedTerm>version</definedTerm>
                <definition>Check whether the version of the file is greater or equal to the check value.</definition>
                <definedTerm>version_eq</definedTerm>
                <definition>Check whether the version of the file is equal to the check value.</definition>
                <definedTerm>version_lt</definedTerm>
                <definition>Check whether the version of the file is lesser than the check value.</definition>
                <definedTerm>version_le</definedTerm>
                <definition>Check whether the version of the file is lesser or equal than the check value.</definition>
                <definedTerm>version_gt</definedTerm>
                <definition>Check whether the version of the file is greater than the check value.</definition>
                <definedTerm>version_ge</definedTerm>
                <definition>Check whether the version of the file is greater or equal than the check value.</definition>
              </definitionTable>
            </para>
            <para>
              It's possible that this check cannot make a decision of whether the component is installed or not per the comparison
              definition. This is true in examples where the file doesn't exist and the comparison type is <literal>version</literal>. 
              In this case the check returns <newTerm>defaultvalue</newTerm>.
            </para>
            <para>
              dotNetInstaller is a 32-bit application and file system access is redirected on a 64-bit operating system by default.
              To disable file system redirection so that dotNetInstaller can access files in their native location on a 64-bit operating system, set the
              <newTerm>disable_wow64_fs_redirection</newTerm> attribute to <literal>true</literal>.
              On 32-bit systems, the <newTerm>disable_wow64_fs_redirection</newTerm> attribute is ignored.
            </para>
          </content>
        </section>
        <section address="checktypesdirectory">
          <title>check_directory</title>
          <content>
            <para>
              Check whether a specific directory exists or if a sub directory exists with a specific version.
            </para>
            <para>
              The following comparison types are available.
              <definitionTable>
                <definedTerm>exists</definedTerm>
                <definition>Check whether the directory exists.</definition>
                <definedTerm>version</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a version number, is greater or equal to the check value.</definition>
                <definedTerm>version_eq</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a version number, is equal to the check value.</definition>
                <definedTerm>version_lt</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a version number, is lesser than the check value.</definition>
                <definedTerm>version_le</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a version number, is lesser or equal than the check value.</definition>
                <definedTerm>version_gt</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a version number, is greater than the check value.</definition>
                <definedTerm>version_ge</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a version number, is greater or equal than the check value.</definition>
                <definedTerm>semver</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a semantic version number, is greater or equal to the check value.</definition>
                <definedTerm>semver_eq</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a semantic version number, is equal to the check value.</definition>
                <definedTerm>semver_lt</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a semantic version number, is lesser than the check value.</definition>
                <definedTerm>semver_le</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a semantic version number, is lesser or equal than the check value.</definition>
                <definedTerm>semver_gt</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a semantic version number, is greater than the check value.</definition>
                <definedTerm>semver_ge</definedTerm>
                <definition>Check whether the name of a sub directory, parsed as a semantic version number, is greater or equal than the check value.</definition>
              </definitionTable>
            </para>
          </content>
        </section>
        <section address="checktypesregistry">
          <title>check_registry_value</title>
          <content>
            <para>
              Check for a specific registry key or value.
              <alert class="note">
                <para>
                  Only the DWORD, REG_SZ and REG_MULTI_SZ registry types are currently supported.
                </para>
              </alert>
            </para>
            <para>
              The following comparison types are available.
              <definitionTable>
                <definedTerm>match</definedTerm>
                <definition>
                  Check that the value of the registry key exactly matches the check value.
                  For REG_MULTI_SZ registry values, specify a comma-separated values.
                  The registry value must match exactly the specified list.
                </definition>
                <definedTerm>exists</definedTerm>
                <definition>
                  Check whether the registry key or value exists. If <newTerm>fieldname</newTerm> is empty, check whether
                  the registry key exists. Otherwise check whether the value exists. To check whether a default registry key 
                  value is set, use <newTerm>value_exists</newTerm>.
                </definition>
                <definedTerm>key_exists</definedTerm>
                <definition>
                  Check whether the registry key exists. The value of <newTerm>fieldname</newTerm> is ignored.
                </definition>
                <definedTerm>value_exists</definedTerm>
                <definition>
                  Check whether the registry value exists. If <newTerm>fieldname</newTerm> is empty, checks whether
                  the default value of a key is set.
                </definition>
                <definedTerm>contains</definedTerm>
                <definition>
                  Check whether the registry value contains the check value.
                  For REG_MULTI_SZ registry values, specify a comma-separated list.
                  The registry value must contain all the specified values.
                </definition>
                <definedTerm>version</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version is
                  greater or equal to the check value. This option is not available for REG_MULTI_SZ
                  values.
                </definition>
                <definedTerm>version_eq</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  equal to the check value.
                </definition>
                <definedTerm>version_lt</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  lesser than the check value.
                </definition>
                <definedTerm>version_le</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  lesser or equal than the check value.
                </definition>
                <definedTerm>version_gt</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  greater than the check value.
                </definition>
                <definedTerm>version_ge</definedTerm>
                <definition>
                  The registry value is interpreted as a file version. Check whether the version in registry is
                  greater or equal than the check value.
                </definition>
              </definitionTable>
            </para>
            <para>
              Registry checks support both 32-bit and 64-bit registry views. dotNetInstaller is a 32-bit application and by 
              default accesses the 32-bit registry view on a 64-bit operating system. To access the 64-bit registry view, set
              <literal>wowoption</literal> to <literal>WOW64_64</literal>. For more information see <externalLink>
                <linkUri>http://msdn.microsoft.com/en-us/library/aa384129(VS.85).aspx</linkUri>
                <linkText>Accessing an Alternate Registry View</linkText>
              </externalLink>.
            </para>
            <para>
              It's possible that this check cannot make a decision of whether the component is installed or not per the comparison
              definition. This is true in examples where the registry key doesn't exist and the comparison type is <literal>version</literal>.
              In this case the check returns <newTerm>defaultvalue</newTerm>. This can be convenient for applying patches to existing
              versions, because the patch should not be installed when neither version of the product is installed. In this case
              set <newTerm>defaultValue</newTerm> to <newTerm>true</newTerm>.
            </para>
            <para>
               <alert class="note">
                  <para>
                     When checking for version, the version string can have the form <literal>major.minor.build.revision</literal>, with <literal>major</literal> being the only field that is required. 
                     Examples include "1", "1.2", "1.2.0", or "1.2.0.100". A leading <literal>v</literal> or <literal>V</literal> is also supported, such as in "v1.2.0" or "V1.2.0.100".
                  </para>
               </alert>
            </para>
          </content>
        </section>
        <section address="checktypesproduct">
          <title>check_product</title>
          <content>
            <para>
              Query the MSI database for a given product by product id or upgrade code. The following properties are available
              in the check.
              <definitionTable>
                <definedTerm>description</definedTerm>
                <definition>A free-formed description of the check, appears in the logs.</definition>
                <definedTerm>id</definedTerm>
                <definition>
                  A product code or upgrade code. A product code identifies a specific version of a product, while an upgrade code
                  never changes and connects multiple product versions together. Note that it is possible to have multiple products
                  relate via an upgrade code. See MSDN
                  <externalLink>
                    <linkText>ProductCode</linkText>
                    <linkUri>http://msdn.microsoft.com/en-us/library/aa370855(VS.85).aspx</linkUri>
                  </externalLink>
                  and
                  <externalLink>
                    <linkText>UpgradeCode</linkText>
                    <linkUri>http://msdn.microsoft.com/en-us/library/aa372375(VS.85).aspx</linkUri>
                  </externalLink>
                  for more information.
                </definition>
                <definedTerm>propertyname</definedTerm>
                <definition>
                  The name of the property to retrieve and use for comparison from the installed product once it
                  has been located by product or upgrade code.
                </definition>
                <definedTerm>propertyvalue</definedTerm>
                <definition>The comparison value.</definition>
              </definitionTable>
            </para>
            <para>
              The following comparison types can be made.
              <definitionTable>
                <definedTerm>exists</definedTerm>
                <definition>Check that the product identified by its ProductCode or UpgradeCode exists.</definition>
                <definedTerm>match</definedTerm>
                <definition>
                  Check that <literal>propertyvalue</literal> matches exactly the property value
                  retrieved from the installed product. If multiple products are found, match all.
                </definition>
                <definedTerm>version</definedTerm>
                <definition>Check whether the version of the installed product(s) is greater or equal to the check value.</definition>
                <definedTerm>version_eq</definedTerm>
                <definition>Check whether the version of the installed product(s) is equal to the check value.</definition>
                <definedTerm>version_lt</definedTerm>
                <definition>Check whether the version of the installed product(s) is lesser than the check value.</definition>
                <definedTerm>version_le</definedTerm>
                <definition>Check whether the version of the installed product(s) is lesser or equal than the check value.</definition>
                <definedTerm>version_gt</definedTerm>
                <definition>Check whether the version of the installed product(s) is greater than the check value.</definition>
                <definedTerm>version_ge</definedTerm>
                <definition>Check whether the version of the installed product(s) is greater or equal than the check value.</definition>
              </definitionTable>
            </para>
            <para>
              It's possible that this check cannot make a decision of whether the component is installed or not per the comparison
              definition. This is true in examples where the product is not installed and the comparison type is <literal>version</literal>.
              In this case the check returns <newTerm>defaultvalue</newTerm>.
            </para>
          </content>
        </section>
      </sections>
    </section>
    <section address="checkoperators">
      <title>Check Operators</title>
      <content>
        <para>
          You can combine results from multiple elements by adding one or more <newTerm>InstalledCheck</newTerm> elements under 
          an <newTerm>InstalledCheckOperator</newTerm>. You may add operators under other operators to achieve more complex logic.
          The following operators are supported: <newTerm>And</newTerm>, <newTerm>Or</newTerm> and <newTerm>Not</newTerm>.
          <alert class="important">
            <para>
              Remember that the check tests whether the component is <legacyBold>installed</legacyBold> and a component appears
              in the boostrapper at setup time only if it is <legacyBold>not installed</legacyBold>. When combining component 
              operators this behavior may require some mental gymnastics.
            </para>
            <para>
              User-defined controls are the opposite. A control will be enabled or visible if the installed check evaluates to 
              <newTerm>True</newTerm>.
            </para>
          </alert>
          <alert class="important">
            <para>
              By default the <newTerm>Not</newTerm> operator behaves as <newTerm>Not Or</newTerm>. When multiple installed checks
              are added under this operator, if any of the checks returns True, the Not operator will return False. To achieve a
              <newTerm>Not And</newTerm> behavior, add an <newTerm>And</newTerm> operator under a <newTerm>Not</newTerm> operator.
            </para>
          </alert>
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>